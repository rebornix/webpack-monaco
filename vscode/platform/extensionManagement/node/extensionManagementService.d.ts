import { TPromise } from 'vs/base/common/winjs.base';
import { IExtensionManagementService, IExtensionGalleryService, ILocalExtension, IGalleryExtension, InstallExtensionEvent, DidInstallExtensionEvent, DidUninstallExtensionEvent, LocalExtensionType } from 'vs/platform/extensionManagement/common/extensionManagement';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import Event from 'vs/base/common/event';
import { IChoiceService } from 'vs/platform/message/common/message';
export declare class ExtensionManagementService implements IExtensionManagementService {
    private environmentService;
    private choiceService;
    private galleryService;
    _serviceBrand: any;
    private extensionsPath;
    private obsoletePath;
    private obsoleteFileLimiter;
    private disposables;
    private _onInstallExtension;
    onInstallExtension: Event<InstallExtensionEvent>;
    private _onDidInstallExtension;
    onDidInstallExtension: Event<DidInstallExtensionEvent>;
    private _onUninstallExtension;
    onUninstallExtension: Event<string>;
    private _onDidUninstallExtension;
    onDidUninstallExtension: Event<DidUninstallExtensionEvent>;
    constructor(environmentService: IEnvironmentService, choiceService: IChoiceService, galleryService: IExtensionGalleryService);
    install(zipPath: string): TPromise<void>;
    installFromGallery(extension: IGalleryExtension, promptToInstallDependencies?: boolean): TPromise<void>;
    private installCompatibleVersion(extension, installDependencies, promptToInstallDependencies);
    private getDependenciesToInstall(extension, checkDependecies);
    private installWithDependencies(extension);
    private bulkInstallWithDependencies(extension, dependecies);
    private rollback(localExtension, dependecies);
    private filterDependenciesToInstall(extension, dependencies);
    private filterOutUninstalled(extensions);
    private getGalleryExtensionForLocalExtension(galleryExtensions, localExtension);
    private downloadAndInstall(extension);
    private installExtension(zipPath, id, metadata?);
    uninstall(extension: ILocalExtension, force?: boolean): TPromise<void>;
    private checkForDependenciesAndUninstall(extension, installed, force);
    private hasDependencies(extension, installed);
    private promptForDependenciesAndUninstall(extension, installed, force);
    private promptAndUninstall(extension, installed, force);
    private uninstallWithDependencies(extension, dependencies, installed);
    private getDependentsErrorMessage(extension, dependents);
    private getDependenciesToUninstallRecursively(extension, installed, checked);
    private filterDependents(extension, dependencies, installed);
    private getDependents(extension, installed);
    private doUninstall(extension);
    private preUninstallExtension(extension);
    private uninstallExtension(id);
    private postUninstallExtension(extension, error?);
    getInstalled(type?: LocalExtensionType): TPromise<ILocalExtension[]>;
    private scanSystemExtensions();
    private scanUserExtensions();
    private scanExtensions(root, type);
    private scanExtensionFolders(root);
    removeDeprecatedExtensions(): TPromise<any>;
    private removeOutdatedExtensions();
    private removeObsoleteExtensions();
    private removeExtensions(extensionsIds);
    private getOutdatedExtensionIds();
    private isObsolete(id);
    private filterObsolete(...ids);
    private setObsolete(id);
    private unsetObsolete(id);
    private getObsoleteExtensions();
    private withObsoleteExtensions<T>(fn);
    dispose(): void;
}
