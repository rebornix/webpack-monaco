import Event from 'vs/base/common/event';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { ILifecycleService } from 'vs/platform/lifecycle/electron-main/lifecycleMain';
import { IRequestService } from 'vs/platform/request/node/request';
import { TPromise } from 'vs/base/common/winjs.base';
import { IUpdateService, State, IUpdate, IRawUpdate } from 'vs/platform/update/common/update';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
export declare class UpdateService implements IUpdateService {
    private lifecycleService;
    private configurationService;
    private telemetryService;
    _serviceBrand: any;
    private _state;
    private _availableUpdate;
    private raw;
    private throttler;
    private _onError;
    readonly onError: Event<any>;
    private _onCheckForUpdate;
    readonly onCheckForUpdate: Event<void>;
    private _onUpdateAvailable;
    readonly onUpdateAvailable: Event<{
        url: string;
        version: string;
    }>;
    private _onUpdateNotAvailable;
    readonly onUpdateNotAvailable: Event<boolean>;
    private _onUpdateReady;
    readonly onUpdateReady: Event<IRawUpdate>;
    private _onStateChange;
    readonly onStateChange: Event<State>;
    private readonly onRawError;
    private readonly onRawUpdateNotAvailable;
    private readonly onRawUpdateAvailable;
    private readonly onRawUpdateDownloaded;
    state: State;
    readonly availableUpdate: IUpdate;
    constructor(requestService: IRequestService, lifecycleService: ILifecycleService, configurationService: IConfigurationService, telemetryService: ITelemetryService);
    private scheduleCheckForUpdates(delay?);
    checkForUpdates(explicit?: boolean): TPromise<IUpdate>;
    private _checkForUpdates(explicit);
    private getUpdateChannel();
    private getUpdateFeedUrl(channel);
    private getUpdatePlatform();
    quitAndInstall(): TPromise<void>;
}
