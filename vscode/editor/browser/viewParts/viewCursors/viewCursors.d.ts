import 'vs/css!./viewCursors';
import { ViewPart } from 'vs/editor/browser/view/viewPart';
import { Position } from 'vs/editor/common/core/position';
import { IViewCursorRenderData } from 'vs/editor/browser/viewParts/viewCursors/viewCursor';
import { ViewContext } from 'vs/editor/common/view/viewContext';
import { RenderingContext, RestrictedRenderingContext } from 'vs/editor/common/view/renderingContext';
import { FastDomNode } from 'vs/base/browser/fastDomNode';
import * as viewEvents from 'vs/editor/common/view/viewEvents';
export declare class ViewCursors extends ViewPart {
    static BLINK_INTERVAL: number;
    private _readOnly;
    private _cursorBlinking;
    private _cursorStyle;
    private _selectionIsEmpty;
    private _isVisible;
    private _domNode;
    private _startCursorBlinkAnimation;
    private _cursorFlatBlinkInterval;
    private _blinkingEnabled;
    private _editorHasFocus;
    private _primaryCursor;
    private _secondaryCursors;
    private _renderData;
    constructor(context: ViewContext);
    dispose(): void;
    getDomNode(): FastDomNode<HTMLElement>;
    onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean;
    private _onCursorPositionChanged(position, secondaryPositions, isInEditableRange);
    onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean;
    onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean;
    onFlushed(e: viewEvents.ViewFlushedEvent): boolean;
    onFocusChanged(e: viewEvents.ViewFocusChangedEvent): boolean;
    onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean;
    onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean;
    onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean;
    onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean;
    onTokensChanged(e: viewEvents.ViewTokensChangedEvent): boolean;
    onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean;
    getPosition(): Position;
    private _getCursorBlinking();
    private _updateBlinking();
    private _updateDomClassName();
    private _getClassName();
    private _show();
    private _hide();
    prepareRender(ctx: RenderingContext): void;
    render(ctx: RestrictedRenderingContext): void;
    getLastRenderData(): IViewCursorRenderData[];
}
