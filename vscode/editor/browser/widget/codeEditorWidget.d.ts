import 'vs/css!./media/editor';
import 'vs/css!./media/tokens';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { CommonCodeEditor } from 'vs/editor/common/commonCodeEditor';
import { CommonEditorConfiguration } from 'vs/editor/common/config/commonEditorConfig';
import { Range, IRange } from 'vs/editor/common/core/range';
import * as editorCommon from 'vs/editor/common/editorCommon';
import { EditorAction } from 'vs/editor/common/editorCommonExtensions';
import { ICodeEditorService } from 'vs/editor/common/services/codeEditorService';
import { Configuration } from 'vs/editor/browser/config/configuration';
import * as editorBrowser from 'vs/editor/browser/editorBrowser';
import { View } from 'vs/editor/browser/view/viewImpl';
import { IDisposable } from 'vs/base/common/lifecycle';
import Event from 'vs/base/common/event';
import { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';
import { IEditorOptions } from 'vs/editor/common/config/editorOptions';
import { IPosition } from 'vs/editor/common/core/position';
import { IEditorWhitespace } from 'vs/editor/common/viewLayout/whitespaceComputer';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IMouseEvent } from 'vs/base/browser/mouseEvent';
export declare abstract class CodeEditorWidget extends CommonCodeEditor implements editorBrowser.ICodeEditor {
    private readonly _onMouseUp;
    readonly onMouseUp: Event<editorBrowser.IEditorMouseEvent>;
    private readonly _onMouseDown;
    readonly onMouseDown: Event<editorBrowser.IEditorMouseEvent>;
    private readonly _onMouseDrag;
    readonly onMouseDrag: Event<editorBrowser.IEditorMouseEvent>;
    private readonly _onMouseDrop;
    readonly onMouseDrop: Event<editorBrowser.IEditorMouseEvent>;
    private readonly _onContextMenu;
    readonly onContextMenu: Event<editorBrowser.IEditorMouseEvent>;
    private readonly _onMouseMove;
    readonly onMouseMove: Event<editorBrowser.IEditorMouseEvent>;
    private readonly _onMouseLeave;
    readonly onMouseLeave: Event<editorBrowser.IEditorMouseEvent>;
    private readonly _onKeyUp;
    readonly onKeyUp: Event<IKeyboardEvent>;
    private readonly _onKeyDown;
    readonly onKeyDown: Event<IKeyboardEvent>;
    private readonly _onDidScrollChange;
    readonly onDidScrollChange: Event<editorCommon.IScrollEvent>;
    private readonly _onDidChangeViewZones;
    readonly onDidChangeViewZones: Event<void>;
    private _codeEditorService;
    private _commandService;
    private _themeService;
    protected domElement: HTMLElement;
    private _focusTracker;
    _configuration: Configuration;
    private contentWidgets;
    private overlayWidgets;
    _view: View;
    constructor(domElement: HTMLElement, options: IEditorOptions, instantiationService: IInstantiationService, codeEditorService: ICodeEditorService, commandService: ICommandService, contextKeyService: IContextKeyService, themeService: IThemeService);
    protected abstract _getContributions(): editorBrowser.IEditorContributionCtor[];
    protected abstract _getActions(): EditorAction[];
    protected _createConfiguration(options: IEditorOptions): CommonEditorConfiguration;
    dispose(): void;
    createOverviewRuler(cssClassName: string, minimumHeight: number, maximumHeight: number): editorBrowser.IOverviewRuler;
    getDomNode(): HTMLElement;
    getCompletelyVisibleLinesRangeInViewport(): Range;
    delegateVerticalScrollbarMouseDown(browserEvent: IMouseEvent): void;
    layout(dimension?: editorCommon.IDimension): void;
    focus(): void;
    isFocused(): boolean;
    hasWidgetFocus(): boolean;
    addContentWidget(widget: editorBrowser.IContentWidget): void;
    layoutContentWidget(widget: editorBrowser.IContentWidget): void;
    removeContentWidget(widget: editorBrowser.IContentWidget): void;
    addOverlayWidget(widget: editorBrowser.IOverlayWidget): void;
    layoutOverlayWidget(widget: editorBrowser.IOverlayWidget): void;
    removeOverlayWidget(widget: editorBrowser.IOverlayWidget): void;
    changeViewZones(callback: (accessor: editorBrowser.IViewZoneChangeAccessor) => void): void;
    getWhitespaces(): IEditorWhitespace[];
    private _getVerticalOffsetForPosition(modelLineNumber, modelColumn);
    getTopForLineNumber(lineNumber: number): number;
    getTopForPosition(lineNumber: number, column: number): number;
    getTargetAtClientPoint(clientX: number, clientY: number): editorBrowser.IMouseTarget;
    getScrolledVisiblePosition(rawPosition: IPosition): {
        top: number;
        left: number;
        height: number;
    };
    getOffsetForColumn(lineNumber: number, column: number): number;
    render(): void;
    setHiddenAreas(ranges: IRange[]): void;
    setAriaActiveDescendant(id: string): void;
    applyFontInfo(target: HTMLElement): void;
    _attachModel(model: editorCommon.IModel): void;
    protected _scheduleAtNextAnimationFrame(callback: () => void): IDisposable;
    protected _createView(): void;
    protected _detachModel(): editorCommon.IModel;
    protected _registerDecorationType(key: string, options: editorCommon.IDecorationRenderOptions, parentTypeKey?: string): void;
    protected _removeDecorationType(key: string): void;
    protected _resolveDecorationOptions(typeKey: string, writable: boolean): editorCommon.IModelDecorationOptions;
}
