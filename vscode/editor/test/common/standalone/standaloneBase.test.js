define(["require", "exports", "assert", "vs/editor/common/standalone/standaloneBase", "vs/base/common/severity"], function (require, exports, assert, standaloneBase_1, severity_1) {
    /*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    suite('StandaloneBase', function () {
        test('exports enums correctly', function () {
            assert.equal(standaloneBase_1.Severity.Ignore, severity_1.default.Ignore);
            assert.equal(standaloneBase_1.Severity.Info, severity_1.default.Info);
            assert.equal(standaloneBase_1.Severity.Warning, severity_1.default.Warning);
            assert.equal(standaloneBase_1.Severity.Error, severity_1.default.Error);
        });
    });
    suite('KeyCode', function () {
        test('is exported correctly in standalone editor', function () {
            function assertKeyCode(standalone, runtime) {
                assert.equal(standalone, runtime);
            }
            assertKeyCode(standaloneBase_1.KeyCode.Unknown, 0 /* Unknown */);
            assertKeyCode(standaloneBase_1.KeyCode.Backspace, 1 /* Backspace */);
            assertKeyCode(standaloneBase_1.KeyCode.Tab, 2 /* Tab */);
            assertKeyCode(standaloneBase_1.KeyCode.Enter, 3 /* Enter */);
            assertKeyCode(standaloneBase_1.KeyCode.Shift, 4 /* Shift */);
            assertKeyCode(standaloneBase_1.KeyCode.Ctrl, 5 /* Ctrl */);
            assertKeyCode(standaloneBase_1.KeyCode.Alt, 6 /* Alt */);
            assertKeyCode(standaloneBase_1.KeyCode.PauseBreak, 7 /* PauseBreak */);
            assertKeyCode(standaloneBase_1.KeyCode.CapsLock, 8 /* CapsLock */);
            assertKeyCode(standaloneBase_1.KeyCode.Escape, 9 /* Escape */);
            assertKeyCode(standaloneBase_1.KeyCode.Space, 10 /* Space */);
            assertKeyCode(standaloneBase_1.KeyCode.PageUp, 11 /* PageUp */);
            assertKeyCode(standaloneBase_1.KeyCode.PageDown, 12 /* PageDown */);
            assertKeyCode(standaloneBase_1.KeyCode.End, 13 /* End */);
            assertKeyCode(standaloneBase_1.KeyCode.Home, 14 /* Home */);
            assertKeyCode(standaloneBase_1.KeyCode.LeftArrow, 15 /* LeftArrow */);
            assertKeyCode(standaloneBase_1.KeyCode.UpArrow, 16 /* UpArrow */);
            assertKeyCode(standaloneBase_1.KeyCode.RightArrow, 17 /* RightArrow */);
            assertKeyCode(standaloneBase_1.KeyCode.DownArrow, 18 /* DownArrow */);
            assertKeyCode(standaloneBase_1.KeyCode.Insert, 19 /* Insert */);
            assertKeyCode(standaloneBase_1.KeyCode.Delete, 20 /* Delete */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_0, 21 /* KEY_0 */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_1, 22 /* KEY_1 */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_2, 23 /* KEY_2 */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_3, 24 /* KEY_3 */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_4, 25 /* KEY_4 */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_5, 26 /* KEY_5 */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_6, 27 /* KEY_6 */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_7, 28 /* KEY_7 */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_8, 29 /* KEY_8 */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_9, 30 /* KEY_9 */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_A, 31 /* KEY_A */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_B, 32 /* KEY_B */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_C, 33 /* KEY_C */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_D, 34 /* KEY_D */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_E, 35 /* KEY_E */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_F, 36 /* KEY_F */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_G, 37 /* KEY_G */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_H, 38 /* KEY_H */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_I, 39 /* KEY_I */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_J, 40 /* KEY_J */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_K, 41 /* KEY_K */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_L, 42 /* KEY_L */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_M, 43 /* KEY_M */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_N, 44 /* KEY_N */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_O, 45 /* KEY_O */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_P, 46 /* KEY_P */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_Q, 47 /* KEY_Q */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_R, 48 /* KEY_R */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_S, 49 /* KEY_S */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_T, 50 /* KEY_T */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_U, 51 /* KEY_U */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_V, 52 /* KEY_V */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_W, 53 /* KEY_W */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_X, 54 /* KEY_X */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_Y, 55 /* KEY_Y */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_Z, 56 /* KEY_Z */);
            assertKeyCode(standaloneBase_1.KeyCode.Meta, 57 /* Meta */);
            assertKeyCode(standaloneBase_1.KeyCode.ContextMenu, 58 /* ContextMenu */);
            assertKeyCode(standaloneBase_1.KeyCode.F1, 59 /* F1 */);
            assertKeyCode(standaloneBase_1.KeyCode.F2, 60 /* F2 */);
            assertKeyCode(standaloneBase_1.KeyCode.F3, 61 /* F3 */);
            assertKeyCode(standaloneBase_1.KeyCode.F4, 62 /* F4 */);
            assertKeyCode(standaloneBase_1.KeyCode.F5, 63 /* F5 */);
            assertKeyCode(standaloneBase_1.KeyCode.F6, 64 /* F6 */);
            assertKeyCode(standaloneBase_1.KeyCode.F7, 65 /* F7 */);
            assertKeyCode(standaloneBase_1.KeyCode.F8, 66 /* F8 */);
            assertKeyCode(standaloneBase_1.KeyCode.F9, 67 /* F9 */);
            assertKeyCode(standaloneBase_1.KeyCode.F10, 68 /* F10 */);
            assertKeyCode(standaloneBase_1.KeyCode.F11, 69 /* F11 */);
            assertKeyCode(standaloneBase_1.KeyCode.F12, 70 /* F12 */);
            assertKeyCode(standaloneBase_1.KeyCode.F13, 71 /* F13 */);
            assertKeyCode(standaloneBase_1.KeyCode.F14, 72 /* F14 */);
            assertKeyCode(standaloneBase_1.KeyCode.F15, 73 /* F15 */);
            assertKeyCode(standaloneBase_1.KeyCode.F16, 74 /* F16 */);
            assertKeyCode(standaloneBase_1.KeyCode.F17, 75 /* F17 */);
            assertKeyCode(standaloneBase_1.KeyCode.F18, 76 /* F18 */);
            assertKeyCode(standaloneBase_1.KeyCode.F19, 77 /* F19 */);
            assertKeyCode(standaloneBase_1.KeyCode.NumLock, 78 /* NumLock */);
            assertKeyCode(standaloneBase_1.KeyCode.ScrollLock, 79 /* ScrollLock */);
            assertKeyCode(standaloneBase_1.KeyCode.US_SEMICOLON, 80 /* US_SEMICOLON */);
            assertKeyCode(standaloneBase_1.KeyCode.US_EQUAL, 81 /* US_EQUAL */);
            assertKeyCode(standaloneBase_1.KeyCode.US_COMMA, 82 /* US_COMMA */);
            assertKeyCode(standaloneBase_1.KeyCode.US_MINUS, 83 /* US_MINUS */);
            assertKeyCode(standaloneBase_1.KeyCode.US_DOT, 84 /* US_DOT */);
            assertKeyCode(standaloneBase_1.KeyCode.US_SLASH, 85 /* US_SLASH */);
            assertKeyCode(standaloneBase_1.KeyCode.US_BACKTICK, 86 /* US_BACKTICK */);
            assertKeyCode(standaloneBase_1.KeyCode.US_OPEN_SQUARE_BRACKET, 87 /* US_OPEN_SQUARE_BRACKET */);
            assertKeyCode(standaloneBase_1.KeyCode.US_BACKSLASH, 88 /* US_BACKSLASH */);
            assertKeyCode(standaloneBase_1.KeyCode.US_CLOSE_SQUARE_BRACKET, 89 /* US_CLOSE_SQUARE_BRACKET */);
            assertKeyCode(standaloneBase_1.KeyCode.US_QUOTE, 90 /* US_QUOTE */);
            assertKeyCode(standaloneBase_1.KeyCode.OEM_8, 91 /* OEM_8 */);
            assertKeyCode(standaloneBase_1.KeyCode.OEM_102, 92 /* OEM_102 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_0, 93 /* NUMPAD_0 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_1, 94 /* NUMPAD_1 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_2, 95 /* NUMPAD_2 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_3, 96 /* NUMPAD_3 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_4, 97 /* NUMPAD_4 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_5, 98 /* NUMPAD_5 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_6, 99 /* NUMPAD_6 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_7, 100 /* NUMPAD_7 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_8, 101 /* NUMPAD_8 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_9, 102 /* NUMPAD_9 */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_MULTIPLY, 103 /* NUMPAD_MULTIPLY */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_ADD, 104 /* NUMPAD_ADD */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_SEPARATOR, 105 /* NUMPAD_SEPARATOR */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_SUBTRACT, 106 /* NUMPAD_SUBTRACT */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_DECIMAL, 107 /* NUMPAD_DECIMAL */);
            assertKeyCode(standaloneBase_1.KeyCode.NUMPAD_DIVIDE, 108 /* NUMPAD_DIVIDE */);
            assertKeyCode(standaloneBase_1.KeyCode.KEY_IN_COMPOSITION, 109 /* KEY_IN_COMPOSITION */);
            assertKeyCode(standaloneBase_1.KeyCode.ABNT_C1, 110 /* ABNT_C1 */);
            assertKeyCode(standaloneBase_1.KeyCode.ABNT_C2, 111 /* ABNT_C2 */);
            assertKeyCode(standaloneBase_1.KeyCode.MAX_VALUE, 112 /* MAX_VALUE */);
        });
    });
});
//# sourceMappingURL=standaloneBase.test.js.map