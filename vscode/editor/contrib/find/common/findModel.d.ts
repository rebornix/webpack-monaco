import * as editorCommon from 'vs/editor/common/editorCommon';
import { FindReplaceState } from './findState';
import { IKeybindings } from 'vs/platform/keybinding/common/keybindingsRegistry';
export declare const ToggleCaseSensitiveKeybinding: IKeybindings;
export declare const ToggleWholeWordKeybinding: IKeybindings;
export declare const ToggleRegexKeybinding: IKeybindings;
export declare const ToggleSearchScopeKeybinding: IKeybindings;
export declare const ShowPreviousFindTermKeybinding: IKeybindings;
export declare const ShowNextFindTermKeybinding: IKeybindings;
export declare const FIND_IDS: {
    StartFindAction: string;
    NextMatchFindAction: string;
    PreviousMatchFindAction: string;
    NextSelectionMatchFindAction: string;
    PreviousSelectionMatchFindAction: string;
    AddSelectionToNextFindMatchAction: string;
    AddSelectionToPreviousFindMatchAction: string;
    MoveSelectionToNextFindMatchAction: string;
    MoveSelectionToPreviousFindMatchAction: string;
    StartFindReplaceAction: string;
    CloseFindWidgetCommand: string;
    ToggleCaseSensitiveCommand: string;
    ToggleWholeWordCommand: string;
    ToggleRegexCommand: string;
    ToggleSearchScopeCommand: string;
    ReplaceOneAction: string;
    ReplaceAllAction: string;
    SelectAllMatchesAction: string;
    ShowPreviousFindTermAction: string;
    ShowNextFindTermAction: string;
};
export declare const MATCHES_LIMIT = 999;
export declare class FindModelBoundToEditorModel {
    private _editor;
    private _state;
    private _toDispose;
    private _decorations;
    private _ignoreModelContentChanged;
    private _updateDecorationsScheduler;
    private _isDisposed;
    constructor(editor: editorCommon.ICommonCodeEditor, state: FindReplaceState);
    dispose(): void;
    private _onStateChanged(e);
    private static _getSearchRange(model, searchOnlyEditableRange, findScope);
    private research(moveCursor, newFindScope?);
    private _hasMatches();
    private _cannotFind();
    private _setCurrentFindMatch(match);
    private _moveToPrevMatch(before, isRecursed?);
    moveToPrevMatch(): void;
    private _moveToNextMatch(after);
    private _getNextMatch(after, captureMatches, forceMove, isRecursed?);
    moveToNextMatch(): void;
    private _getReplacePattern();
    replace(): void;
    private _findMatches(findScope, captureMatches, limitResultCount);
    replaceAll(): void;
    private _largeReplaceAll();
    private _regularReplaceAll(findScope);
    selectAllMatches(): void;
    private _executeEditorCommand(source, command);
}
