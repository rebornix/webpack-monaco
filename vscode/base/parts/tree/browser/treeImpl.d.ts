import 'vs/css!./tree';
import WinJS = require('vs/base/common/winjs.base');
import Events = require('vs/base/common/eventEmitter');
import _ = require('vs/base/parts/tree/browser/tree');
import { INavigator } from 'vs/base/common/iterator';
import Event from 'vs/base/common/event';
export declare class TreeContext implements _.ITreeContext {
    tree: _.ITree;
    configuration: _.ITreeConfiguration;
    options: _.ITreeOptions;
    dataSource: _.IDataSource;
    renderer: _.IRenderer;
    controller: _.IController;
    dnd: _.IDragAndDrop;
    filter: _.IFilter;
    sorter: _.ISorter;
    accessibilityProvider: _.IAccessibilityProvider;
    constructor(tree: _.ITree, configuration: _.ITreeConfiguration, options?: _.ITreeOptions);
}
export declare class Tree extends Events.EventEmitter implements _.ITree {
    private container;
    private configuration;
    private options;
    private context;
    private model;
    private view;
    private _onDispose;
    private _onHighlightChange;
    private toDispose;
    constructor(container: HTMLElement, configuration: _.ITreeConfiguration, options?: _.ITreeOptions);
    style(styles: _.ITreeStyles): void;
    readonly onDOMFocus: Event<void>;
    readonly onDOMBlur: Event<void>;
    readonly onHighlightChange: Event<void>;
    readonly onDispose: Event<void>;
    getHTMLElement(): HTMLElement;
    layout(height?: number): void;
    DOMFocus(): void;
    isDOMFocused(): boolean;
    DOMBlur(): void;
    onVisible(): void;
    onHidden(): void;
    setInput(element: any): WinJS.Promise;
    getInput(): any;
    refresh(element?: any, recursive?: boolean): WinJS.Promise;
    expand(element: any): WinJS.Promise;
    expandAll(elements: any[]): WinJS.Promise;
    collapse(element: any, recursive?: boolean): WinJS.Promise;
    collapseAll(elements?: any[], recursive?: boolean): WinJS.Promise;
    toggleExpansion(element: any, recursive?: boolean): WinJS.Promise;
    toggleExpansionAll(elements: any[]): WinJS.Promise;
    isExpanded(element: any): boolean;
    getExpandedElements(): any[];
    reveal(element: any, relativeTop?: number): WinJS.Promise;
    getRelativeTop(element: any): number;
    getScrollPosition(): number;
    setScrollPosition(pos: number): void;
    getContentHeight(): number;
    setHighlight(element?: any, eventPayload?: any): void;
    getHighlight(): any;
    isHighlighted(element: any): boolean;
    clearHighlight(eventPayload?: any): void;
    select(element: any, eventPayload?: any): void;
    selectRange(fromElement: any, toElement: any, eventPayload?: any): void;
    deselectRange(fromElement: any, toElement: any, eventPayload?: any): void;
    selectAll(elements: any[], eventPayload?: any): void;
    deselect(element: any, eventPayload?: any): void;
    deselectAll(elements: any[], eventPayload?: any): void;
    setSelection(elements: any[], eventPayload?: any): void;
    toggleSelection(element: any, eventPayload?: any): void;
    isSelected(element: any): boolean;
    getSelection(): any[];
    clearSelection(eventPayload?: any): void;
    selectNext(count?: number, clearSelection?: boolean, eventPayload?: any): void;
    selectPrevious(count?: number, clearSelection?: boolean, eventPayload?: any): void;
    selectParent(clearSelection?: boolean, eventPayload?: any): void;
    setFocus(element?: any, eventPayload?: any): void;
    isFocused(element: any): boolean;
    getFocus(): any;
    focusNext(count?: number, eventPayload?: any): void;
    focusPrevious(count?: number, eventPayload?: any): void;
    focusParent(eventPayload?: any): void;
    focusFirstChild(eventPayload?: any): void;
    focusFirst(eventPayload?: any, from?: any): void;
    focusNth(index: number, eventPayload?: any): void;
    focusLast(eventPayload?: any, from?: any): void;
    focusNextPage(eventPayload?: any): void;
    focusPreviousPage(eventPayload?: any): void;
    clearFocus(eventPayload?: any): void;
    addTraits(trait: string, elements: any[]): void;
    removeTraits(trait: string, elements: any[]): void;
    toggleTrait(trait: string, element: any): void;
    hasTrait(trait: string, element: any): boolean;
    getNavigator(fromElement?: any, subTreeOnly?: boolean): INavigator<any>;
    dispose(): void;
}
