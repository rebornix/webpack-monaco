define(["require", "exports", "assert"], function (require, exports, assert) {
    /*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    suite('CharCode', function () {
        test('has good values', function () {
            function assertValue(actual, expected) {
                assert.equal(actual, expected.charCodeAt(0), 'char code ok for <<' + expected + '>>');
            }
            assertValue(9 /* Tab */, '\t');
            assertValue(10 /* LineFeed */, '\n');
            assertValue(13 /* CarriageReturn */, '\r');
            assertValue(32 /* Space */, ' ');
            assertValue(33 /* ExclamationMark */, '!');
            assertValue(34 /* DoubleQuote */, '"');
            assertValue(35 /* Hash */, '#');
            assertValue(36 /* DollarSign */, '$');
            assertValue(37 /* PercentSign */, '%');
            assertValue(38 /* Ampersand */, '&');
            assertValue(39 /* SingleQuote */, '\'');
            assertValue(40 /* OpenParen */, '(');
            assertValue(41 /* CloseParen */, ')');
            assertValue(42 /* Asterisk */, '*');
            assertValue(43 /* Plus */, '+');
            assertValue(44 /* Comma */, ',');
            assertValue(45 /* Dash */, '-');
            assertValue(46 /* Period */, '.');
            assertValue(47 /* Slash */, '/');
            assertValue(48 /* Digit0 */, '0');
            assertValue(49 /* Digit1 */, '1');
            assertValue(50 /* Digit2 */, '2');
            assertValue(51 /* Digit3 */, '3');
            assertValue(52 /* Digit4 */, '4');
            assertValue(53 /* Digit5 */, '5');
            assertValue(54 /* Digit6 */, '6');
            assertValue(55 /* Digit7 */, '7');
            assertValue(56 /* Digit8 */, '8');
            assertValue(57 /* Digit9 */, '9');
            assertValue(58 /* Colon */, ':');
            assertValue(59 /* Semicolon */, ';');
            assertValue(60 /* LessThan */, '<');
            assertValue(61 /* Equals */, '=');
            assertValue(62 /* GreaterThan */, '>');
            assertValue(63 /* QuestionMark */, '?');
            assertValue(64 /* AtSign */, '@');
            assertValue(65 /* A */, 'A');
            assertValue(66 /* B */, 'B');
            assertValue(67 /* C */, 'C');
            assertValue(68 /* D */, 'D');
            assertValue(69 /* E */, 'E');
            assertValue(70 /* F */, 'F');
            assertValue(71 /* G */, 'G');
            assertValue(72 /* H */, 'H');
            assertValue(73 /* I */, 'I');
            assertValue(74 /* J */, 'J');
            assertValue(75 /* K */, 'K');
            assertValue(76 /* L */, 'L');
            assertValue(77 /* M */, 'M');
            assertValue(78 /* N */, 'N');
            assertValue(79 /* O */, 'O');
            assertValue(80 /* P */, 'P');
            assertValue(81 /* Q */, 'Q');
            assertValue(82 /* R */, 'R');
            assertValue(83 /* S */, 'S');
            assertValue(84 /* T */, 'T');
            assertValue(85 /* U */, 'U');
            assertValue(86 /* V */, 'V');
            assertValue(87 /* W */, 'W');
            assertValue(88 /* X */, 'X');
            assertValue(89 /* Y */, 'Y');
            assertValue(90 /* Z */, 'Z');
            assertValue(91 /* OpenSquareBracket */, '[');
            assertValue(92 /* Backslash */, '\\');
            assertValue(93 /* CloseSquareBracket */, ']');
            assertValue(94 /* Caret */, '^');
            assertValue(95 /* Underline */, '_');
            assertValue(96 /* BackTick */, '`');
            assertValue(97 /* a */, 'a');
            assertValue(98 /* b */, 'b');
            assertValue(99 /* c */, 'c');
            assertValue(100 /* d */, 'd');
            assertValue(101 /* e */, 'e');
            assertValue(102 /* f */, 'f');
            assertValue(103 /* g */, 'g');
            assertValue(104 /* h */, 'h');
            assertValue(105 /* i */, 'i');
            assertValue(106 /* j */, 'j');
            assertValue(107 /* k */, 'k');
            assertValue(108 /* l */, 'l');
            assertValue(109 /* m */, 'm');
            assertValue(110 /* n */, 'n');
            assertValue(111 /* o */, 'o');
            assertValue(112 /* p */, 'p');
            assertValue(113 /* q */, 'q');
            assertValue(114 /* r */, 'r');
            assertValue(115 /* s */, 's');
            assertValue(116 /* t */, 't');
            assertValue(117 /* u */, 'u');
            assertValue(118 /* v */, 'v');
            assertValue(119 /* w */, 'w');
            assertValue(120 /* x */, 'x');
            assertValue(121 /* y */, 'y');
            assertValue(122 /* z */, 'z');
            assertValue(123 /* OpenCurlyBrace */, '{');
            assertValue(124 /* Pipe */, '|');
            assertValue(125 /* CloseCurlyBrace */, '}');
            assertValue(126 /* Tilde */, '~');
        });
    });
});
//# sourceMappingURL=charCode.test.js.map