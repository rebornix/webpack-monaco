import { IModelService } from 'vs/editor/common/services/modelService';
import { IModel } from 'vs/editor/common/editorCommon';
import { ICodeEditorService } from 'vs/editor/common/services/codeEditorService';
import Event from 'vs/base/common/event';
import { IExtHostContext } from '../node/extHost.protocol';
import { MainThreadTextEditor } from './mainThreadEditor';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IEditor } from 'vs/platform/editor/common/editor';
import { IModeService } from 'vs/editor/common/services/modeService';
import { IFileService } from 'vs/platform/files/common/files';
import { ITextModelService } from 'vs/editor/common/services/resolverService';
import { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
export declare class MainThreadDocumentsAndEditors {
    private _modelService;
    private _textFileService;
    private _workbenchEditorService;
    private _toDispose;
    private _proxy;
    private _stateComputer;
    private _editors;
    private _onTextEditorAdd;
    private _onTextEditorRemove;
    private _onDocumentAdd;
    private _onDocumentRemove;
    readonly onTextEditorAdd: Event<MainThreadTextEditor[]>;
    readonly onTextEditorRemove: Event<string[]>;
    readonly onDocumentAdd: Event<IModel[]>;
    readonly onDocumentRemove: Event<string[]>;
    constructor(extHostContext: IExtHostContext, _modelService: IModelService, _textFileService: ITextFileService, _workbenchEditorService: IWorkbenchEditorService, codeEditorService: ICodeEditorService, modeService: IModeService, fileService: IFileService, textModelResolverService: ITextModelService, untitledEditorService: IUntitledEditorService, editorGroupService: IEditorGroupService, telemetryService: ITelemetryService);
    dispose(): void;
    private _onDelta(delta);
    private _toModelAddData(model);
    private _toTextEditorAddData(textEditor);
    private _findEditorPosition(editor);
    findTextEditorIdFor(editor: IEditor): string;
    getEditor(id: string): MainThreadTextEditor;
}
