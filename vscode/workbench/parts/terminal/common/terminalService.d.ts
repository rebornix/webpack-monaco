import Event, { Emitter } from 'vs/base/common/event';
import { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IPanelService } from 'vs/workbench/services/panel/common/panelService';
import { IPartService } from 'vs/workbench/services/part/common/partService';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { ITerminalService, ITerminalInstance, IShellLaunchConfig, ITerminalConfigHelper } from 'vs/workbench/parts/terminal/common/terminal';
import { TPromise } from 'vs/base/common/winjs.base';
export declare abstract class TerminalService implements ITerminalService {
    private _contextKeyService;
    private _configurationService;
    protected _panelService: IPanelService;
    private _partService;
    _serviceBrand: any;
    protected _isShuttingDown: boolean;
    protected _terminalFocusContextKey: IContextKey<boolean>;
    protected _findWidgetVisible: IContextKey<boolean>;
    protected _terminalContainer: HTMLElement;
    protected _onInstancesChanged: Emitter<string>;
    protected _onInstanceDisposed: Emitter<ITerminalInstance>;
    protected _onInstanceProcessIdReady: Emitter<ITerminalInstance>;
    protected _onInstanceData: Emitter<{
        instance: ITerminalInstance;
        data: string;
    }>;
    protected _onInstanceTitleChanged: Emitter<string>;
    protected _terminalInstances: ITerminalInstance[];
    private _activeTerminalInstanceIndex;
    private _onActiveInstanceChanged;
    readonly activeTerminalInstanceIndex: number;
    readonly onActiveInstanceChanged: Event<string>;
    readonly onInstanceDisposed: Event<ITerminalInstance>;
    readonly onInstanceProcessIdReady: Event<ITerminalInstance>;
    readonly onInstanceData: Event<{
        instance: ITerminalInstance;
        data: string;
    }>;
    readonly onInstanceTitleChanged: Event<string>;
    readonly onInstancesChanged: Event<string>;
    readonly terminalInstances: ITerminalInstance[];
    readonly abstract configHelper: ITerminalConfigHelper;
    constructor(_contextKeyService: IContextKeyService, _configurationService: IConfigurationService, _panelService: IPanelService, _partService: IPartService, lifecycleService: ILifecycleService);
    protected abstract _showTerminalCloseConfirmation(): boolean;
    abstract createInstance(shell?: IShellLaunchConfig, wasNewTerminalAction?: boolean): ITerminalInstance;
    abstract getActiveOrCreateInstance(wasNewTerminalAction?: boolean): ITerminalInstance;
    abstract selectDefaultWindowsShell(): TPromise<string>;
    abstract setContainers(panelContainer: HTMLElement, terminalContainer: HTMLElement): void;
    private _onWillShutdown();
    getInstanceLabels(): string[];
    private _removeInstance(terminalInstance);
    getActiveInstance(): ITerminalInstance;
    getInstanceFromId(terminalId: number): ITerminalInstance;
    getInstanceFromIndex(terminalIndex: number): ITerminalInstance;
    setActiveInstance(terminalInstance: ITerminalInstance): void;
    setActiveInstanceByIndex(terminalIndex: number): void;
    setActiveInstanceToNext(): void;
    setActiveInstanceToPrevious(): void;
    showPanel(focus?: boolean): TPromise<void>;
    hidePanel(): void;
    abstract focusFindWidget(): TPromise<void>;
    abstract hideFindWidget(): void;
    abstract showNextFindTermFindWidget(): void;
    abstract showPreviousFindTermFindWidget(): void;
    private _getIndexFromId(terminalId);
    updateConfig(): void;
    setWorkspaceShellAllowed(isAllowed: boolean): void;
}
