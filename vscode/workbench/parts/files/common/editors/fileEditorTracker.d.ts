import { IWorkbenchContribution } from 'vs/workbench/common/contributions';
import { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';
import { IFileService } from 'vs/platform/files/common/files';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IEnvironmentService } from 'vs/platform/environment/common/environment';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
export declare class FileEditorTracker implements IWorkbenchContribution {
    private editorService;
    private textFileService;
    private lifecycleService;
    private editorGroupService;
    private fileService;
    private environmentService;
    private configurationService;
    private stacks;
    private toUnbind;
    protected closeOnFileDelete: boolean;
    constructor(editorService: IWorkbenchEditorService, textFileService: ITextFileService, lifecycleService: ILifecycleService, editorGroupService: IEditorGroupService, fileService: IFileService, environmentService: IEnvironmentService, configurationService: IConfigurationService);
    getId(): string;
    private registerListeners();
    private onConfigurationUpdated(configuration);
    private onFileOperation(e);
    private onFileChanges(e);
    private handleDeletes(arg1, isExternal, movedTo?);
    private getOpenedFileEditors(dirtyState);
    private handleMovedFileInOpenedEditors(oldResource, newResource);
    private getViewStateFor(resource, group);
    private handleUpdates(e);
    private handleUpdatesToVisibleEditors(e);
    dispose(): void;
}
