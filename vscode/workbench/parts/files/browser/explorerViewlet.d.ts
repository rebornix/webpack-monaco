import 'vs/css!./media/explorerviewlet';
import { IActionRunner } from 'vs/base/common/actions';
import { TPromise } from 'vs/base/common/winjs.base';
import { Builder } from 'vs/base/browser/builder';
import { PersistentViewsViewlet, IView, IViewletViewOptions } from 'vs/workbench/parts/views/browser/views';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IConfigurationEditingService } from 'vs/workbench/services/configuration/common/configurationEditing';
import { FileViewletState } from 'vs/workbench/parts/files/browser/views/explorerViewer';
import { ExplorerView } from 'vs/workbench/parts/files/browser/views/explorerView';
import { EmptyView } from 'vs/workbench/parts/files/browser/views/emptyView';
import { OpenEditorsView } from 'vs/workbench/parts/files/browser/views/openEditorsView';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IExtensionService } from 'vs/platform/extensions/common/extensions';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IViewDescriptor } from 'vs/workbench/parts/views/browser/viewsRegistry';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
export declare class ExplorerViewlet extends PersistentViewsViewlet {
    protected contextService: IWorkspaceContextService;
    protected storageService: IStorageService;
    private editorGroupService;
    private editorService;
    private configurationService;
    protected instantiationService: IInstantiationService;
    private configurationEditingService;
    private static EXPLORER_VIEWS_STATE;
    private viewletState;
    private viewletVisibleContextKey;
    private openEditorsVisibleContextKey;
    constructor(telemetryService: ITelemetryService, contextService: IWorkspaceContextService, storageService: IStorageService, editorGroupService: IEditorGroupService, editorService: IWorkbenchEditorService, configurationService: IConfigurationService, instantiationService: IInstantiationService, contextKeyService: IContextKeyService, configurationEditingService: IConfigurationEditingService, themeService: IThemeService, contextMenuService: IContextMenuService, extensionService: IExtensionService);
    create(parent: Builder): TPromise<void>;
    private registerViews();
    private createOpenEditorsViewDescriptor();
    private createEmptyViewDescriptor();
    private createExplorerViewDescriptor();
    private onConfigurationUpdated();
    protected createView(viewDescriptor: IViewDescriptor, initialSize: number, options: IViewletViewOptions): IView;
    getExplorerView(): ExplorerView;
    getOpenEditorsView(): OpenEditorsView;
    getEmptyView(): EmptyView;
    setVisible(visible: boolean): TPromise<void>;
    focus(): void;
    private hasSelectionOrFocus(view);
    getActionRunner(): IActionRunner;
    getViewletState(): FileViewletState;
}
