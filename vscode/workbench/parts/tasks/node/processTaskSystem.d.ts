import { TPromise } from 'vs/base/common/winjs.base';
import { EventEmitter } from 'vs/base/common/eventEmitter';
import { IOutputService } from 'vs/workbench/parts/output/common/output';
import { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';
import { IMarkerService } from 'vs/platform/markers/common/markers';
import { IModelService } from 'vs/editor/common/services/modelService';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { ITaskSystem, ITaskExecuteResult, TaskTerminateResponse } from 'vs/workbench/parts/tasks/common/taskSystem';
import { Task } from 'vs/workbench/parts/tasks/common/tasks';
export declare class ProcessTaskSystem extends EventEmitter implements ITaskSystem {
    static TelemetryEventName: string;
    private markerService;
    private modelService;
    private outputService;
    private telemetryService;
    private configurationResolverService;
    private contextService;
    private outputChannel;
    private errorsShown;
    private childProcess;
    private activeTask;
    private activeTaskPromise;
    constructor(markerService: IMarkerService, modelService: IModelService, telemetryService: ITelemetryService, outputService: IOutputService, configurationResolverService: IConfigurationResolverService, contextService: IWorkspaceContextService, outputChannelId: string);
    isActive(): TPromise<boolean>;
    isActiveSync(): boolean;
    getActiveTasks(): Task[];
    run(task: Task): ITaskExecuteResult;
    revealTask(task: Task): boolean;
    hasErrors(value: boolean): void;
    canAutoTerminate(): boolean;
    terminate(_id: string): TPromise<TaskTerminateResponse>;
    terminateAll(): TPromise<TaskTerminateResponse[]>;
    private executeTask(task, trigger?);
    private doExecuteTask(task, telemetryEvent);
    private childProcessEnded();
    private handleError(task, errorData);
    private checkTerminated(task, data);
    private resolveOptions(options);
    private resolveVariables(value);
    private resolveMatchers(values);
    private resolveVariable(value);
    log(value: string): void;
    private showOutput();
    private clearOutput();
}
