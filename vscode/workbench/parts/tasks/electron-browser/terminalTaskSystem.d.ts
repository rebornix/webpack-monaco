import { TPromise } from 'vs/base/common/winjs.base';
import { EventEmitter } from 'vs/base/common/eventEmitter';
import { IMarkerService } from 'vs/platform/markers/common/markers';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IModelService } from 'vs/editor/common/services/modelService';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';
import { ITerminalService } from 'vs/workbench/parts/terminal/common/terminal';
import { IOutputService } from 'vs/workbench/parts/output/common/output';
import { Task } from 'vs/workbench/parts/tasks/common/tasks';
import { ITaskSystem, ITaskExecuteResult, ITaskResolver, TaskTerminateResponse } from 'vs/workbench/parts/tasks/common/taskSystem';
export declare class TerminalTaskSystem extends EventEmitter implements ITaskSystem {
    private terminalService;
    private outputService;
    private markerService;
    private modelService;
    private configurationResolverService;
    private telemetryService;
    private workbenchEditorService;
    private contextService;
    static TelemetryEventName: string;
    private outputChannel;
    private activeTasks;
    private terminals;
    private idleTaskTerminals;
    private sameTaskTerminals;
    constructor(terminalService: ITerminalService, outputService: IOutputService, markerService: IMarkerService, modelService: IModelService, configurationResolverService: IConfigurationResolverService, telemetryService: ITelemetryService, workbenchEditorService: IWorkbenchEditorService, contextService: IWorkspaceContextService, outputChannelId: string);
    log(value: string): void;
    protected showOutput(): void;
    run(task: Task, resolver: ITaskResolver, trigger?: string): ITaskExecuteResult;
    revealTask(task: Task): boolean;
    isActive(): TPromise<boolean>;
    isActiveSync(): boolean;
    canAutoTerminate(): boolean;
    getActiveTasks(): Task[];
    terminate(id: string): TPromise<TaskTerminateResponse>;
    terminateAll(): TPromise<TaskTerminateResponse[]>;
    private executeTask(startedTasks, task, resolver, trigger);
    private executeCommand(task, trigger);
    private createTerminal(task);
    private resolveCommandAndArgs(task);
    private findExecutable(command, cwd);
    private resolveVariables(value);
    private resolveMatchers(values);
    private resolveVariable(value);
    private resolveOptions(options);
    private registerLinkMatchers(terminal, problemMatchers);
    private static doubleQuotes;
    protected ensureDoubleQuotes(value: string): {
        value: string;
        quoted: boolean;
    };
    private static WellKnowCommands;
    getSanitizedCommand(cmd: string): string;
}
