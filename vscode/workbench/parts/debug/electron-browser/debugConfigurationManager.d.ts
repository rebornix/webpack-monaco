import Event from 'vs/base/common/event';
import { TPromise } from 'vs/base/common/winjs.base';
import uri from 'vs/base/common/uri';
import { IModel } from 'vs/editor/common/editorCommon';
import { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';
import { IStorageService } from 'vs/platform/storage/common/storage';
import * as extensionsRegistry from 'vs/platform/extensions/common/extensionsRegistry';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { IFileService } from 'vs/platform/files/common/files';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { IDebugConfigurationProvider, IRawAdapter, IConfigurationManager, ILaunch } from 'vs/workbench/parts/debug/common/debug';
import { Adapter } from 'vs/workbench/parts/debug/node/debugAdapter';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';
import { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';
export declare const debuggersExtPoint: extensionsRegistry.IExtensionPoint<IRawAdapter[]>;
export declare const schemaId = "vscode://schemas/launch";
export declare class ConfigurationManager implements IConfigurationManager {
    private contextService;
    private fileService;
    private telemetryService;
    private editorService;
    private configurationService;
    private quickOpenService;
    private configurationResolverService;
    private instantiationService;
    private commandService;
    private storageService;
    private adapters;
    private breakpointModeIdsSet;
    private launches;
    private _selectedName;
    private _selectedLaunch;
    private toDispose;
    private _onDidSelectConfigurationName;
    private _mru;
    private _providers;
    constructor(contextService: IWorkspaceContextService, fileService: IFileService, telemetryService: ITelemetryService, editorService: IWorkbenchEditorService, configurationService: IConfigurationService, quickOpenService: IQuickOpenService, configurationResolverService: IConfigurationResolverService, instantiationService: IInstantiationService, commandService: ICommandService, storageService: IStorageService, lifecycleService: ILifecycleService);
    registerDebugConfigurationProvider(handle: number, debugConfigurationProvider: IDebugConfigurationProvider): void;
    unregisterDebugConfigurationProvider(handle: number): boolean;
    resolveDebugConfiguration(folderUri: uri | undefined, debugConfiguration: any): TPromise<any>;
    provideDebugConfigurations(folderUri: uri | undefined, type: string): TPromise<any[]>;
    private registerListeners(lifecycleService);
    private initLaunches();
    getLaunches(): ILaunch[];
    readonly selectedLaunch: ILaunch;
    readonly selectedName: string;
    readonly onDidSelectConfiguration: Event<void>;
    readonly mruConfigs: {
        name: string;
        launch: ILaunch;
    }[];
    selectConfiguration(launch: ILaunch, name?: string, debugStarted?: boolean): void;
    canSetBreakpointsIn(model: IModel): boolean;
    getAdapter(type: string): Adapter;
    guessAdapter(type?: string): TPromise<Adapter>;
    getStartSessionCommand(type?: string): TPromise<{
        command: string;
        type: string;
    }>;
    private store();
    dispose(): void;
}
