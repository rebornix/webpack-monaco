import 'vs/css!./media/extensionEditor';
import { TPromise } from 'vs/base/common/winjs.base';
import { Builder } from 'vs/base/browser/builder';
import { BaseEditor } from 'vs/workbench/browser/parts/editor/baseEditor';
import { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';
import { ExtensionsInput } from 'vs/workbench/parts/extensions/common/extensionsInput';
import { IExtensionsWorkbenchService } from 'vs/workbench/parts/extensions/common/extensions';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { EditorOptions } from 'vs/workbench/common/editor';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IMessageService } from 'vs/platform/message/common/message';
import { IOpenerService } from 'vs/platform/opener/common/opener';
import { Position } from 'vs/platform/editor/common/editor';
import { IListService } from 'vs/platform/list/browser/listService';
import { IPartService } from 'vs/workbench/services/part/common/partService';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IContextViewService } from 'vs/platform/contextview/browser/contextView';
import { IContextKeyService, RawContextKey, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';
/**  A context key that is set when an extension editor webview has focus. */
export declare const KEYBINDING_CONTEXT_EXTENSIONEDITOR_WEBVIEW_FOCUS: RawContextKey<boolean>;
/**  A context key that is set when an extension editor webview not have focus. */
export declare const KEYBINDING_CONTEXT_EXTENSIONEDITOR_WEBVIEW_NOT_FOCUSED: ContextKeyExpr;
/**  A context key that is set when the find widget find input in extension editor webview is focused. */
export declare const KEYBINDING_CONTEXT_EXTENSIONEDITOR_FIND_WIDGET_INPUT_FOCUSED: RawContextKey<boolean>;
/**  A context key that is set when the find widget find input in extension editor webview is not focused. */
export declare const KEYBINDING_CONTEXT_EXTENSIONEDITOR_FIND_WIDGET_INPUT_NOT_FOCUSED: ContextKeyExpr;
export declare class ExtensionEditor extends BaseEditor {
    private galleryService;
    private configurationService;
    private instantiationService;
    private viewletService;
    private extensionsWorkbenchService;
    protected themeService: IThemeService;
    private keybindingService;
    private messageService;
    private openerService;
    private listService;
    private partService;
    private contextViewService;
    private contextKeyService;
    static ID: string;
    private icon;
    private name;
    private identifier;
    private license;
    private publisher;
    private installCount;
    private rating;
    private description;
    private extensionActionBar;
    private navbar;
    private content;
    private _highlight;
    private highlightDisposable;
    private extensionReadme;
    private extensionChangelog;
    private extensionManifest;
    private extensionDependencies;
    private contextKey;
    private findInputFocusContextKey;
    private layoutParticipants;
    private contentDisposables;
    private transientDisposables;
    private disposables;
    private activeWebview;
    constructor(telemetryService: ITelemetryService, galleryService: IExtensionGalleryService, configurationService: IConfigurationService, instantiationService: IInstantiationService, viewletService: IViewletService, extensionsWorkbenchService: IExtensionsWorkbenchService, themeService: IThemeService, keybindingService: IKeybindingService, messageService: IMessageService, openerService: IOpenerService, listService: IListService, partService: IPartService, contextViewService: IContextViewService, contextKeyService: IContextKeyService);
    createEditor(parent: Builder): void;
    setInput(input: ExtensionsInput, options: EditorOptions): TPromise<void>;
    changePosition(position: Position): void;
    showFind(): void;
    hideFind(): void;
    showNextFindTerm(): void;
    showPreviousFindTerm(): void;
    private onNavbarChange(extension, id);
    private openMarkdown(content, noContentCopy);
    private openReadme();
    private openChangelog();
    private openContributions();
    private openDependencies(extension);
    private renderDependencies(container, extensionDependencies);
    private renderSettings(container, manifest, onDetailsToggle);
    private renderDebuggers(container, manifest, onDetailsToggle);
    private renderViews(container, manifest, onDetailsToggle);
    private renderThemes(container, manifest, onDetailsToggle);
    private renderJSONValidation(container, manifest, onDetailsToggle);
    private renderCommands(container, manifest, onDetailsToggle);
    private renderLanguages(container, manifest, onDetailsToggle);
    private resolveKeybinding(rawKeyBinding);
    private loadContents(loadingTask);
    layout(): void;
    private onError(err);
    dispose(): void;
}
