import 'vs/css!./media/scmViewlet';
import { TPromise } from 'vs/base/common/winjs.base';
import { Builder } from 'vs/base/browser/builder';
import { PersistentViewsViewlet, IViewletViewOptions, IView } from 'vs/workbench/parts/views/browser/views';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { ISCMService } from 'vs/workbench/services/scm/common/scm';
import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IContextViewService, IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { ICommandService } from 'vs/platform/commands/common/commands';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IMessageService } from 'vs/platform/message/common/message';
import { IListService } from 'vs/platform/list/browser/listService';
import { IAction, IActionItem } from 'vs/base/common/actions';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IExtensionService } from 'vs/platform/extensions/common/extensions';
import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
import { IStorageService } from 'vs/platform/storage/common/storage';
import { IViewDescriptor } from 'vs/workbench/parts/views/browser/viewsRegistry';
export declare class SCMViewlet extends PersistentViewsViewlet {
    protected scmService: ISCMService;
    protected contextViewService: IContextViewService;
    protected keybindingService: IKeybindingService;
    protected messageService: IMessageService;
    protected listService: IListService;
    protected themeService: IThemeService;
    protected commandService: ICommandService;
    protected editorGroupService: IEditorGroupService;
    protected editorService: IWorkbenchEditorService;
    private disposables;
    constructor(telemetryService: ITelemetryService, scmService: ISCMService, instantiationService: IInstantiationService, contextViewService: IContextViewService, contextKeyService: IContextKeyService, keybindingService: IKeybindingService, messageService: IMessageService, listService: IListService, contextMenuService: IContextMenuService, themeService: IThemeService, commandService: ICommandService, editorGroupService: IEditorGroupService, editorService: IWorkbenchEditorService, contextService: IWorkspaceContextService, storageService: IStorageService, extensionService: IExtensionService);
    private onDidAddRepository(repository);
    private onDidRemoveRepository(repository);
    create(parent: Builder): TPromise<void>;
    protected createView(viewDescriptor: IViewDescriptor, initialSize: number, options: IViewletViewOptions): IView;
    getOptimalWidth(): number;
    getTitle(): string;
    getActions(): IAction[];
    getSecondaryActions(): IAction[];
    getActionItem(action: IAction): IActionItem;
    dispose(): void;
}
