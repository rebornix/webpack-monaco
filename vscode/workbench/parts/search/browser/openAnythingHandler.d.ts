import { TPromise } from 'vs/base/common/winjs.base';
import { IAutoFocus } from 'vs/base/parts/quickopen/common/quickOpen';
import { QuickOpenModel } from 'vs/base/parts/quickopen/browser/quickOpenModel';
import { QuickOpenHandler } from 'vs/workbench/browser/quickopen';
import * as openSymbolHandler from 'vs/workbench/parts/search/browser/openSymbolHandler';
import { IMessageService } from 'vs/platform/message/common/message';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
export import OpenSymbolHandler = openSymbolHandler.OpenSymbolHandler;
export declare class OpenAnythingHandler extends QuickOpenHandler {
    private messageService;
    private configurationService;
    private telemetryService;
    private static LINE_COLON_PATTERN;
    private static FILE_SEARCH_DELAY;
    private static SYMBOL_SEARCH_DELAY;
    private static MAX_DISPLAYED_RESULTS;
    private openSymbolHandler;
    private openFileHandler;
    private searchDelayer;
    private pendingSearch;
    private isClosed;
    private scorerCache;
    private includeSymbols;
    constructor(messageService: IMessageService, instantiationService: IInstantiationService, configurationService: IConfigurationService, telemetryService: ITelemetryService);
    private registerListeners();
    private updateHandlers(configuration);
    getResults(searchValue: string): TPromise<QuickOpenModel>;
    hasShortResponseTime(): boolean;
    private extractRange(value);
    getGroupLabel(): string;
    getAutoFocus(searchValue: string): IAutoFocus;
    onOpen(): void;
    onClose(canceled: boolean): void;
    private cancelPendingSearch();
    private createTimerEventData(startTime, telemetry);
    private createFileEventData(startTime, stats);
}
