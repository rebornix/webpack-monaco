import 'vs/css!./media/views';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { TPromise } from 'vs/base/common/winjs.base';
import { Builder } from 'vs/base/browser/builder';
import { IAction, IActionItem } from 'vs/base/common/actions';
import { IMessageService } from 'vs/platform/message/common/message';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IListService } from 'vs/platform/list/browser/listService';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { ITree } from 'vs/base/parts/tree/browser/tree';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IExtensionService } from 'vs/platform/extensions/common/extensions';
import { CollapsibleState } from 'vs/base/browser/ui/splitview/splitview';
import { CollapsibleView, IViewletViewOptions } from 'vs/workbench/parts/views/browser/views';
import { ICommandService } from 'vs/platform/commands/common/commands';
export declare class TreeView extends CollapsibleView {
    private options;
    private messageService;
    private instantiationService;
    private listService;
    private themeService;
    private contextKeyService;
    private extensionService;
    private commandService;
    private menus;
    private viewFocusContext;
    private activated;
    private treeInputPromise;
    private dataProviderElementChangeListener;
    private disposables;
    constructor(initialSize: number, options: IViewletViewOptions, messageService: IMessageService, keybindingService: IKeybindingService, contextMenuService: IContextMenuService, instantiationService: IInstantiationService, listService: IListService, themeService: IThemeService, contextKeyService: IContextKeyService, extensionService: IExtensionService, commandService: ICommandService);
    renderHeader(container: HTMLElement): void;
    renderBody(container: HTMLElement): void;
    protected changeState(state: CollapsibleState): void;
    private activate();
    createViewer(container: Builder): ITree;
    getActions(): IAction[];
    getSecondaryActions(): IAction[];
    getActionItem(action: IAction): IActionItem;
    setVisible(visible: boolean): TPromise<void>;
    private setInput();
    private listenToDataProvider();
    getOptimalWidth(): number;
    private onSelection();
    private refresh(elements);
    dispose(): void;
}
