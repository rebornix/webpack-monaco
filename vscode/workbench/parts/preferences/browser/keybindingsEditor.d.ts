import 'vs/css!./media/keybindingsEditor';
import { TPromise } from 'vs/base/common/winjs.base';
import { Builder, Dimension } from 'vs/base/browser/builder';
import { BaseEditor } from 'vs/workbench/browser/parts/editor/baseEditor';
import { EditorInput } from 'vs/workbench/common/editor';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
import { KeybindingsEditorModel, IKeybindingItemEntry } from 'vs/workbench/parts/preferences/common/keybindingsEditorModel';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
import { IPreferencesService, IKeybindingsEditor } from 'vs/workbench/parts/preferences/common/preferences';
import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
import { IKeybindingEditingService } from 'vs/workbench/services/keybinding/common/keybindingEditing';
import { IListService } from 'vs/platform/list/browser/listService';
import { IThemeService } from 'vs/platform/theme/common/themeService';
import { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';
import { IChoiceService, IMessageService } from 'vs/platform/message/common/message';
import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
export declare class KeybindingsEditorInput extends EditorInput {
    private instantiationService;
    static ID: string;
    readonly keybindingsModel: KeybindingsEditorModel;
    constructor(instantiationService: IInstantiationService);
    getTypeId(): string;
    getName(): string;
    resolve(refresh?: boolean): TPromise<KeybindingsEditorModel>;
    matches(otherInput: any): boolean;
}
export declare class KeybindingsEditor extends BaseEditor implements IKeybindingsEditor {
    private keybindingsService;
    private contextMenuService;
    private preferencesService;
    private keybindingEditingService;
    private listService;
    private contextKeyService;
    private choiceService;
    private messageService;
    private clipboardService;
    private instantiationService;
    private editorService;
    static ID: string;
    private keybindingsEditorModel;
    private headerContainer;
    private searchWidget;
    private overlayContainer;
    private defineKeybindingWidget;
    private keybindingsListContainer;
    private unAssignedKeybindingItemToRevealAndFocus;
    private listEntries;
    private keybindingsList;
    private dimension;
    private delayedFiltering;
    private latestEmptyFilters;
    private delayedFilterLogging;
    private keybindingsEditorContextKey;
    private keybindingFocusContextKey;
    private searchFocusContextKey;
    private sortByPrecedence;
    constructor(telemetryService: ITelemetryService, themeService: IThemeService, keybindingsService: IKeybindingService, contextMenuService: IContextMenuService, preferencesService: IPreferencesService, keybindingEditingService: IKeybindingEditingService, listService: IListService, contextKeyService: IContextKeyService, choiceService: IChoiceService, messageService: IMessageService, clipboardService: IClipboardService, instantiationService: IInstantiationService, editorService: IWorkbenchEditorService);
    createEditor(parent: Builder): void;
    setInput(input: KeybindingsEditorInput): TPromise<void>;
    clearInput(): void;
    layout(dimension: Dimension): void;
    focus(): void;
    readonly activeKeybindingEntry: IKeybindingItemEntry;
    defineKeybinding(keybindingEntry: IKeybindingItemEntry): TPromise<any>;
    removeKeybinding(keybindingEntry: IKeybindingItemEntry): TPromise<any>;
    resetKeybinding(keybindingEntry: IKeybindingItemEntry): TPromise<any>;
    copyKeybinding(keybinding: IKeybindingItemEntry): TPromise<any>;
    search(filter: string): void;
    showConflicts(keybindingEntry: IKeybindingItemEntry): TPromise<any>;
    private createOverlayContainer(parent);
    private showOverlayContainer();
    private hideOverlayContainer();
    private createHeader(parent);
    private createOpenKeybindingsElement(parent);
    private createBody(parent);
    private createList(parent);
    private render();
    private filterKeybindings();
    private renderKeybindingsEntries(reset);
    private layoutKebindingsList();
    private getIndexOf(listEntry);
    private getNewIndexOfUnassignedKeybinding(unassignedKeybinding);
    private selectEntry(keybindingItemEntry);
    focusKeybindings(): void;
    private onContextMenu(e);
    private onFocusChange(e);
    private createDefineAction(keybindingItemEntry);
    private createRemoveAction(keybindingItem);
    private createResetAction(keybindingItem);
    private createShowConflictsAction(keybindingItem);
    private createCopyAction(keybindingItem);
    private reportFilteringUsed(filter);
    /**
     * Put a rough limit on the size of the telemetry data, since otherwise it could be an unbounded large amount
     * of data. 8192 is the max size of a property value. This is rough since that probably includes ""s, etc.
     */
    private getLatestEmptyFiltersForTelemetry();
    private reportKeybindingAction(action, command, keybinding);
    private onKeybindingEditingError(error);
}
