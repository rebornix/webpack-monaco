import { IBackupMainService } from 'vs/platform/backup/common/backup';
import { IEnvironmentService, ParsedArgs } from 'vs/platform/environment/common/environment';
import { IStorageService } from 'vs/platform/storage/node/storage';
import { CodeWindow } from 'vs/code/electron-main/window';
import { ILifecycleService } from 'vs/platform/lifecycle/electron-main/lifecycleMain';
import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
import { ILogService } from 'vs/platform/log/common/log';
import { OpenContext, INativeOpenDialogOptions } from 'vs/platform/windows/common/windows';
import CommonEvent from 'vs/base/common/event';
import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
import { IWindowsMainService, IOpenConfiguration, IWindowsCountChangedEvent } from 'vs/platform/windows/electron-main/windows';
import { IHistoryMainService } from 'vs/platform/history/common/history';
import { IProcessEnvironment } from 'vs/base/common/platform';
import { TPromise } from 'vs/base/common/winjs.base';
import { IWorkspacesMainService } from 'vs/platform/workspaces/common/workspaces';
import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
export declare class WindowsManager implements IWindowsMainService {
    private logService;
    private storageService;
    private environmentService;
    private lifecycleService;
    private backupService;
    private telemetryService;
    private configurationService;
    private historyService;
    private workspacesService;
    private instantiationService;
    _serviceBrand: any;
    private static windowsStateStorageKey;
    private static WINDOWS;
    private initialUserEnv;
    private windowsState;
    private lastClosedWindowState;
    private fileDialog;
    private _onWindowReady;
    onWindowReady: CommonEvent<CodeWindow>;
    private _onWindowClose;
    onWindowClose: CommonEvent<number>;
    private _onActiveWindowChanged;
    onActiveWindowChanged: CommonEvent<CodeWindow>;
    private _onWindowReload;
    onWindowReload: CommonEvent<number>;
    private _onWindowsCountChanged;
    onWindowsCountChanged: CommonEvent<IWindowsCountChangedEvent>;
    constructor(logService: ILogService, storageService: IStorageService, environmentService: IEnvironmentService, lifecycleService: ILifecycleService, backupService: IBackupMainService, telemetryService: ITelemetryService, configurationService: IConfigurationService, historyService: IHistoryMainService, workspacesService: IWorkspacesMainService, instantiationService: IInstantiationService);
    private migrateLegacyWindowState();
    ready(initialUserEnv: IProcessEnvironment): void;
    private registerListeners();
    private onBeforeQuit();
    private onBeforeWindowClose(win);
    private toWindowState(win);
    open(openConfig: IOpenConfiguration): CodeWindow[];
    private doOpen(openConfig, workspacesToOpen, workspacesToRestore, foldersToOpen, foldersToRestore, emptyToRestore, emptyToOpen, filesToOpen, filesToCreate, filesToDiff, foldersToAdd);
    private doOpenFilesInExistingWindow(window, filesToOpen, filesToCreate, filesToDiff);
    private doAddFoldersToExistingWidow(window, foldersToAdd);
    private doOpenFolderOrWorkspace(openConfig, folderOrWorkspace, openInNewWindow, filesToOpen, filesToCreate, filesToDiff, windowToUse?);
    private getPathsToOpen(openConfig);
    private doExtractPathsFromAPI(openConfig);
    private doExtractPathsFromCLI(cli);
    private doGetWindowsFromLastSession();
    private getRestoreWindowsSetting();
    private parsePath(anyPath, options?);
    private shouldOpenNewWindow(openConfig);
    openExtensionDevelopmentHostWindow(openConfig: IOpenConfiguration): void;
    private openInBrowserWindow(options);
    private getNewWindowState(configuration);
    private ensureNoOverlap(state);
    reload(win: CodeWindow, cli?: ParsedArgs): void;
    closeWorkspace(win: CodeWindow): void;
    saveAndOpenWorkspace(window: CodeWindow, path: string): TPromise<void>;
    createAndOpenWorkspace(window: CodeWindow, folders?: string[], path?: string): TPromise<void>;
    private doSaveAndOpenWorkspace(window, workspace, path?);
    openWorkspace(window?: CodeWindow): void;
    private getWorkspaceDialogDefaultPath(workspace?);
    private onBeforeWindowUnload(e);
    private promptToSaveUntitledWorkspace(e, workspace);
    focusLastActive(cli: ParsedArgs, context: OpenContext): CodeWindow;
    getLastActiveWindow(): CodeWindow;
    openNewWindow(context: OpenContext): void;
    waitForWindowClose(windowId: number): TPromise<void>;
    sendToFocused(channel: string, ...args: any[]): void;
    sendToAll(channel: string, payload?: any, windowIdsToIgnore?: number[]): void;
    getFocusedWindow(): CodeWindow;
    getWindowById(windowId: number): CodeWindow;
    getWindows(): CodeWindow[];
    getWindowCount(): number;
    private onWindowError(window, error);
    private onWindowClosed(win);
    pickFileFolderAndOpen(options: INativeOpenDialogOptions): void;
    pickFolderAndOpen(options: INativeOpenDialogOptions): void;
    pickFileAndOpen(options: INativeOpenDialogOptions): void;
    private doPickAndOpen(options, pickFolders, pickFiles);
    quit(): void;
}
